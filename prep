# In Atom, press Ctrl + Shift + l to select language

# check working directory
pwd()
# set working directory
cd("C:/Users/Matt/Desktop/Julia files")
# find version of Julia
VERSION


# adding packages and reading in data
# stochastic diff eq.s solver!
Pkg.add("StochasticDiffEq")
using StochasticDiffEq
# add DelimitedFiles package for reading in data as arrays
using Pkg
Pkg.add("DelimitedFiles")
# add DataFrames package for reading data as dataframes
using Pkg
Pkg.add("DataFrames")
# add csv package
Pkg.add("CSV")
# read in CSV dataframe
using CSV
df = CSV.read("magic04.csv")
# read in CSV as array
using DelimitedFiles
array = readdlm("magic04.csv",',')
# read in text file
f = open("C:/Users/Matt/Desktop/Julia files/easy_ham/0001.ea7e79d3153e7469e7a9c3e0af6a357e","r")
lines = readlines(f); # parses whole file; splits inot one-line strings and returns array of strings as output
close(f)


# transforming data types
string(1234)
Int64(1234)
Float64(1234)


# simple Julia functions
# 1D array
p = Array{Int64}(undef,3,4) # The undef means that the array hasn't been initialized to known values
# 3D array
p = Array{Int64}(undef,3,4); p[:] = 1:12; show(p)
# search in array
11 in p
# find length of elements in array
m = ["top","down","left","right"]
[length(t for t in n) for n in m]
# append to array
a = [1,"string",34,"forth"]
b = ["time",920,"foo"]
append!(a,b); show(a)
p = append!(p,[rand(10)])
# dictionary
d = Dict("apple"=>2,"orange"=>4,"cherry"=>3.5)
# print to screen; note: PRINT is for non-interactive use; DISPLAY is for interactive use
x="hello";y="world"; print(x,' ',y)
a=123; b=456; print(a + b)
# limit of numeric types
typemax(Int64)
typemin(Float64)
# collect
collect(1:5)
# show, which shows contents of arrays or dicts
a=collect(1:50); show([a])
# range, which shows range of data and can equally spaces out data
show(collect(range(1,10)))
show(collect(range(0; stop = 5, step = .2334)))
# random data
show(rand(10)) # shows ten random integers in array
show(rand(Bool,10)) # shows ten random Boolean values in array
show(rand(2:5,10)) # shows ten random integers between 2 and 5
# random data following Bell curve
show(randn(10))
# set seed random
using Random
show(Random.seed!(0))
# sum and mean
using Statistics
sum([1,2,3]); sum(a)
mean([1,2,3,4])
# pop! function, which finds elements in dictionaries
pop!(d,"apple")
# push! function, which appends an element to the end of an existing array
push!(a,"new element")
# splice! function removes elements
]up
splice!(a,5) # removes 5 from a and returns 5
splice!(a,49,23) # removes 49 from a and replaces it with 23
show([a])
# insert! is like splice! but doesn't remove elements it finds
insert!(a,50,51)
# sort: the bang version augments the array
sort(a)
sort!(a)
show(a)
# get retrieves values in dictionaries
get(d,"apple","Value not found!")
# keys shows all keys in a dictionary; values shows all values in dictionary
keys(d)
values(d)
# length shows number of elements in array; size shows number of characters in strings
length(a)
size(a)
# time returns current Unix time (since 01/01/1970)
time()
# map applies a function to the elements of an array and provides results in an output array
# e.g., map length to array m:
show(map(length,["this","is","an","example","of","a","map"]))


# Operators output Boolean results
# Logical operators are && ("and") and || ("or")
# Alphanumeric operators are <,>,==,<=,>=,!=


# if-else statements
x=2;y=1;c=0;e=0
if x>=1
    c+=1
else
    d+=1
end; # executing this code again increments c
c,e
x=0;c=0;e=0;
if x>0
    c+=1
elseif x==0
    e+=1
else
    println("x is negative")
end;
c,e
# can use ternary operators to abbreviate if-else statements
x=0;c=0;e=0; result = x>0 ? c+=1 : x==0 ? e+=1 : println("x is negative")

# break
X = [1,4,-3,0,-1,-12]
for i = 1:length(X)
    if X[i] == -1
        println(i)
        break
    end
end

# for-loops
s=0
for i = 1:2:10  # repeat for values of i ranging from 1 to 10, with a step of 2 (i.e. odd numbers)
    s+=1        # that is, s = s + 1
    println("s=",s)
end

# while-loops
c=1
while c<100
    println(c)
    c*=2
end
