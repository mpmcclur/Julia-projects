# In Atom, press Ctrl + Shift + l to select language

# outliers are typically replaced with max or min values; missing values with mean or median values

# check working directory
pwd()
# set working directory
cd("C:/Users/Matt/Desktop/Julia files")
# find version of Julia
VERSION


# adding packages and reading in data
# stochastic diff eq.s solver!
using Pkg
Pkg.add("StochasticDiffEq")
using StochasticDiffEq
# add DelimitedFiles package for reading in data as arrays
Pkg.add("DelimitedFiles")
# add DataFrames package for reading data as dataframes
using Pkg
Pkg.add("DataFrames")
# add csv package
Pkg.add("CSV")
# read in CSV dataframe
using CSV
df = CSV.read("magic04.csv")
# or
df = readtable("magic04.csv")
# read in CSV as array
using DelimitedFiles
array = readdlm("magic04.csv",',')
# read in text file
f = open("C:/Users/Matt/Desktop/Julia files/easy_ham/0001.ea7e79d3153e7469e7a9c3e0af6a357e","r")
lines = readlines(f); # parses whole file; splits inot one-line strings and returns array of strings as output
close(f)
# read in a json file
Pkg.add(“JSON”)
import JSON
f = open(“file.json”)
x = JSON.parse(f)
close(f)
# save data to json file
f = open("test.json", "w")
JSON.print(f,X)
close(f)
# save dataframes into data files
writetable("dataset.csv", df) # also works for tsv files


# transforming data types
string(1234)
Int64(1234)
Float64(1234)


# simple Julia functions
# 1D array
p = Array{Int64}(undef,3,4) # The undef means that the array hasn't been initialized to known values
# 3D array
p = Array{Int64}(undef,3,4); p[:] = 1:12; show(p)
# search in array
11 in p
# find length of elements in array
m = ["top","down","left","right"]
[length(t for t in n) for n in m]
# append to array
a = [1,"string",34,"forth"]
b = ["time",920,"foo"]
append!(a,b); show(a)
p = append!(p,[rand(10)])
# dictionary
d = Dict("apple"=>2,"orange"=>4,"cherry"=>3.5)
# print to screen; note: PRINT is for non-interactive use; DISPLAY is for interactive use
x="hello";y="world"; print(x,' ',y)
a=123; b=456; print(a + b)
# limit of numeric types
typemax(Int64)
typemin(Float64)
# collect
collect(1:5)
# show, which shows contents of arrays or dicts
a=collect(1:50); show([a])
# range, which shows range of data and can equally spaces out data
show(collect(range(1,10)))
show(collect(range(0; stop = 5, step = .2334)))
# random data
show(rand(10)) # shows ten random integers in array
show(rand(Bool,10)) # shows ten random Boolean values in array
show(rand(2:5,10)) # shows ten random integers between 2 and 5
# random data following Bell curve
show(randn(10))
# set seed random
using Random
show(Random.seed!(0))
# sum and mean
using Statistics
sum([1,2,3]); sum(a)
mean([1,2,3,4])
# pop! function, which finds elements in dictionaries
pop!(d,"apple")
# push! function, which appends an element to the end of an existing array
push!(a,"new element")
# splice! function removes elements
]up
splice!(a,5) # removes 5 from a and returns 5
splice!(a,49,23) # removes 49 from a and replaces it with 23
show([a])
# insert! is like splice! but doesn't remove elements it finds
insert!(a,50,51)
# sort: the bang version augments the array
sort(a)
sort!(a)
show(a)
# get retrieves values in dictionaries
get(d,"apple","Value not found!")
# keys shows all keys in a dictionary; values shows all values in dictionary
keys(d)
values(d)
# length shows number of elements in array; size shows number of characters in strings
length(a)
size(a)
# time returns current Unix time (since 01/01/1970)
time()
# map applies a function to the elements of an array and provides results in an output array
# e.g., map length to array m:
show(map(length,["this","is","an","example","of","a","map"]))
# split splits a string into an array of strings
s = "This is a string"
split(s) # each word is an element of an array
split(s,"") # each letter is an element of an array
# join is the opposite of split; it concatenates elements of an array together
s2 = ["I","like","strings"]
join(s2," ")
join(s,s2) # adds each element of s2 to each letter in s


# Regex integration
# occursin checks a given string for the presence of absence of a regex pattern
s = "The days of the week are Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, and Sunday"
p = r"([A-Z])\w+"
occursin(p,s)
# match determines which substring corresponds to the regex pattern and where
m = match(p,s)
m.match # shows first matched regex in m
m.offset # shows second matched regex in m
# eachmatch parses all matching objects of the string
eachmatch(p,s)


# Operators output Boolean results
# Logical operators are && ("and") and || ("or")
# Alphanumeric operators are <,>,==,<=,>=,!=


# if-else statements
x=2;y=1;c=0;e=0
if x>=1
    c+=1
else
    d+=1
end; # executing this code again increments c
c,e
x=0;c=0;e=0;
if x>0
    c+=1
elseif x==0
    e+=1
else
    println("x is negative")
end;
c,e
# can use ternary operators to abbreviate if-else statements
x=0;c=0;e=0; result = x>0 ? c+=1 : x==0 ? e+=1 : println("x is negative")

# break
X = [1,4,-3,0,-1,-12]
for i = 1:length(X)
    if X[i] == -1
        println(i)
        break
    end
end

# for-loops
s=0
for i = 1:2:10  # repeat for values of i ranging from 1 to 10, with a step of 2 (i.e. odd numbers)
    s=+1        # that is, s = s + 1
    println("s=",s)
end

# while-loops
c=1
while c<100
    println(c)
    c=*2
end


# Custom Functions
# simple one-liner functions
res(x::Array) = x-mean(x) # subtracts the mean of x from each element of x
g(x) = x-mean(x)
# anonymous functions, applied as soon as executed and not stored into memory for future use
x -> x - mx # the anonymous function here is x, created by ->
X = [1,2,3,4,5,6,7,8,9,10,11]
mx = mean(X)
show(map(x -> x - mx, X))
# multiple dispatch, use the same function for different data types
res(x::Number) = x # the res function with input x already exists, but before with arrays; now it accepts numbers
res(5)
res(X)
# skewness function
function skewness_type(X::Array) # this function type only supports 1D arrays
    m=mean(X)
    M=median(X)
    if m>M
        output = "positive"
    elseif m<M
        output = "negative"
    else
        output = "balanced"
    end
    return output
end
skewness_type([1,2,3,4,5])


# complete solution example
# use a function to find the mode
function mode(X::Array)
    ux = unique(X)
    n = length(ux)
    z = zeros(n)
    for x in X
        ind = findin(ux,x)
        z[ind] =+ 1
    end
    m_ind = findmax(z)[2]
    return ux[m_ind]
end
# create a function that finds missing values
function missing_values_indexes(X::Array)
    ind = Int[]
    n = length(X)
    for i = 1:n
        if isempty(X[i])
            push!(ind,i)
        end
    end
    return ind
end
# create a function to determine whether data are continuous or discrete
function feature_type(X::Array)
    n = length(X)
    for i = 1:n
        if length(X[i]) > 0
            tx = string(typeof(X[i]))
            if tx in ["ASCIIString","Char","Bool"]
                ft = "discrete"
                break
            elseif contains(tx, "Float")
                ft = "continuous"
            end
        end
    end
    return ft
end
# bring them together using the wrapper (main) function
function main(X::Array)
    N,n=size(X)
    y=Array(T,N,n)
    for i = 1:n
        F = X[:,i]
        ind = missing_values_indexes(F)
        if length(ind) > 0
            ind2 = setdiff(1:N,ind)
            if feature_type(F) == "discrete"
                y = mode(F[ind2])
            else
                y = median(F[ind2])
            end
            F[ind] = y
        end
        Y[:,i] = F
    end
    return Y
end

# strip text stored in variable S of irrelevant characters
S = "@IamaT2018sTRISing])()2234ten"
typeof(S)
function strip(X::Any)
    for c in X
        Z = ""
        if lowercase(c) in "qwertyuiopasdfghjklzxcvbnm "
            Z = string(Z,c)
        end
    end
    return Z
end
strip(S)
